# -*- coding: utf-8 -*-
"""graphical Aanalysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8OYE8ztVVMFFMuv665TgQ3c0SrLBWMu
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df_full = pd.read_csv("/content/drive/MyDrive/crop/final_one_code_encoding_Karnataka.csv")
df_full.head(10)

data = df_full[["date", "year","month", "day_numeric","precipMM","avg_precipMM", "price", "demand"]]
data.head(10)

data['demand'] = data['demand'].fillna(0)
data['price'] = data['price'].fillna(0)

x=data["demand"].tolist()
print(x[0:5])
number_list=[2.0,1.0,3.0]
avg = sum(number_list)/len(number_list)
avg

data['demand'] = data['demand'].fillna(0)

data_predict = data[["date", "demand"]]
data_predict.head(10)

delete_years = [2015,2022,2021]
data_predict = data_predict[data.year.isin(delete_years) == False]
data_predict.head(10)

data_predict.tail(10)

# c=data["price"].tolist()
# avg=[]
# week=[-1]
# for i in range(1,len(c)):
#   if (c[i-1]>c[i]):
#     week.append(i-1)
#     # avg.append(sum(c[0:i]/i)
# print(week)

# k=[2,4,6,7,8,9,4,2,1,6,7,8,5]
# p=[]
# n=[]
# try:
#   for i in range(0,len(week)):
#     n.append('W'+str(i))
#     print(k[(week[i]+1):(week[i+1]+1)])
#     # print((week[i+1]-week[i]))
#     p.append(sum(k[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
# except:
#   print("no")

data_predict.shape

data_predict.dtypes

pd.to_datetime(data_predict["date"], infer_datetime_format=True)

data_predict.rename(columns = {'date':'ds', 'demand':'y'}, inplace = True)
data_predict.head()

data_predict.tail()

!pip install Prophet

!sudo pip install fbprophet

!pip install fbprophet

from prophet import Prophet

# # check prophet version
# import fbprophet
# # print version number
# print('Prophet %s' % fbprophet.__version__)

# define the model
# set the uncertainty interval to 95% (the Prophet default is 80%)
model = Prophet(interval_width=0.8)
# fit the model
model.fit(data_predict)

future = model.make_future_dataframe(periods=365)
forecast = model.predict(future )
x=forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(365)

x.head()

model_1= prophet(
    growth = "logistic",
    seasonality_mode = "multiplicative",
    seasanality_prior_scale = 20,
    yearly_seasonality = True
            )
fig = model_1.plot(forecast)
a = add_changepoints_to_plot(fig.gca(), model_1, forecast)

from prophet.plot import add_changepoints_to_plot
fig = model.plot(forecast)
a = add_changepoints_to_plot(fig.gca(), model, forecast)

m = Prophet(changepoint_prior_scale=0.5)
forecast = m.fit(data_predict).predict(future)
fig = m.plot(forecast)

m = Prophet(changepoints=['2020-01-01'])
forecast = m.fit(data_predict).predict(future)
fig = m.plot(forecast)

x.head()

l=[0,2,3,0,4]
l.remove(0)

l

x.tail()

fig2 = model.plot(forecast, uncertainty=True)
fig2

from prophet.plot import plot_plotly, plot_components_plotly
fig3 = plot_plotly(model, forecast)
fig3

x.head()

fig1 = model.plot_components(forecast)

date_pre=x["ds"].tolist()
demand_pre=x["yhat"].tolist()

import matplotlib.pyplot as plt
x1 = date_pre
y1 = demand_pre
y2 = demand_19


plt.plot(x1, y1, label = "predicted")
plt.plot(x1, y2, label = "original")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('demand')
# giving a title to my graph
plt.title('prophet_model')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

delete_years = [2015,2022,2021]
data_predict = data_predict[data.year.isin(delete_years) == False]
data_predict.head(10)

"""Avg_precipMM and precipMM are same pattern|"""

date_list=data["date"].tolist()
avg_precipMM_list=data["avg_precipMM"].tolist()
precipMM_list=data["precipMM"].tolist()
demand_list=data["demand"].tolist()
price_list=data["price"].tolist()

avg_precipMM_list[0]

precipMM_list[0]

date_16=date_list[365:731]
date_17=date_list[731:1096]
date_18=date_list[1096:1461]
date_19=date_list[1461:1826]
date_20=date_list[1826:2192]
date_21=date_list[2192:2557]

avg_precipMM_16=avg_precipMM_list[365:731]
avg_precipMM_17=avg_precipMM_list[731:1096]
avg_precipMM_18=avg_precipMM_list[1096:1461]
avg_precipMM_19=avg_precipMM_list[1461:1826]
avg_precipMM_20=avg_precipMM_list[1826:2192]
avg_precipMM_21=avg_precipMM_list[2192:2557]

avg_precipMM_16[0]

precipMM_16=precipMM_list[365:731]
precipMM_17=precipMM_list[731:1096]
precipMM_18=precipMM_list[1096:1461]
precipMM_19=precipMM_list[1461:1826]
precipMM_20=precipMM_list[1826:2192]
precipMM_21=precipMM_list[2192:2557]

precipMM_16[0]

demand_16=demand_list[365:731]
demand_17=demand_list[731:1096]
demand_18=demand_list[1096:1461]
demand_19=demand_list[1461:1826]
demand_20=demand_list[1826:2192]
demand_21=demand_list[2192:2557]

price_16=price_list[365:731]
price_17=price_list[731:1096]
price_18=price_list[1096:1461]
price_19=price_list[1461:1826]
price_20=price_list[1826:2192]
price_21=price_list[2192:2557]

import matplotlib.pyplot as plt
x1 = date_16
y1 = precipMM_16
y2 = avg_precipMM_16


plt.plot(x1, y1, label = "precipMM")
plt.plot(x1, y2, label = "avg_precipMM")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('precipMM')
# giving a title to my graph
plt.title('precipMM_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_16
y1 = precipMM_16
y2 = avg_precipMM_16

# plt.plot(x1, y1, label = "precipMM")
plt.plot(x1, y2, label = "avg_precipMM")



plt.xlabel('Date')
# naming the y axis
plt.ylabel('avg_precipMM')
# giving a title to my graph
plt.title('Avg_precipMM_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_16
y1 = precipMM_16
y2 = demand_16
y3 = price_16

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_16
y1 = precipMM_16
y2 = demand_16
y3 = price_16

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_17
y1 = precipMM_17
y2 = demand_17
y3 = price_17

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2017')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_18
y1 = precipMM_18
y2 = demand_18
y3 = price_18

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2018')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_19
y1 = precipMM_19
y2 = demand_19
y3 = price_19

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2019')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_20
y1 = precipMM_20
y2 = demand_20
y3 = price_20

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2020')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = date_21
y1 = precipMM_21
y2 = demand_21
y3 = price_21

plt.plot(x1, y1, label = "avg_precipMM")
plt.plot(x1, y2, label = "Arrival")
plt.plot(x1, y3, label = "price")


plt.xlabel('Date')
# naming the y axis
plt.ylabel('price/Arrival/avg_precipMM')
# giving a title to my graph
plt.title('Seasonal_tomato_2021')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

avg_precipMM_16_date=Weather_date_list[365:731]
avg_precipMM_17_date=Weather_date_list[731:1096]
avg_precipMM_18_date=Weather_date_list[1096:1461]
avg_precipMM_19_date=Weather_date_list[1461:1826]
avg_precipMM_20_date=Weather_date_list[1826:2192]
avg_precipMM_21_date=Weather_date_list[2192:2557]
print(len(avg_precipMM_16_date))
print(len(avg_precipMM_17_date))
print(len(avg_precipMM_18_date))
print(len(avg_precipMM_19_date))
print(len(avg_precipMM_20_date))
print(len(avg_precipMM_21_date))
print(avg_precipMM_16_date[0])

avg_precipMM_16=avg_precipMM_list[365:731]
avg_precipMM_17=avg_precipMM_list[731:1096]
avg_precipMM_18=avg_precipMM_list[1096:1461]
avg_precipMM_19=avg_precipMM_list[1461:1826]
avg_precipMM_20=avg_precipMM_list[1826:2192]
avg_precipMM_21=avg_precipMM_list[2192:2557]

day_numeric

df_weather = pd.read_csv("/content/drive/MyDrive/crop/karnataka_weather_new.csv")
df_weather.head(10)

avg_precipMM_list=df_weather["avg_precipMM"].tolist()
precipMM_list=df_weather["precipMM"].tolist()
Weather_date_list=df_weather["date"].tolist()
print(avg_precipMM_list[0:5])
print(Weather_date_list[0:5])

precipMM_16=precipMM_list[365:731]
precipMM_17=precipMM_list[365:731]
precipMM_18=precipMM_list[365:731]
precipMM_19=precipMM_list[365:731]
precipMM_20=precipMM_list[365:731]
precipMM_21=precipMM_list[365:731]

avg_precipMM_16=avg_precipMM_list[365:731]
avg_precipMM_17=avg_precipMM_list[731:1096]
avg_precipMM_18=avg_precipMM_list[1096:1461]
avg_precipMM_19=avg_precipMM_list[1461:1826]
avg_precipMM_20=avg_precipMM_list[1826:2192]
avg_precipMM_21=avg_precipMM_list[2192:2557]

avg_precipMM_16_date=Weather_date_list[365:731]
avg_precipMM_17_date=Weather_date_list[731:1096]
avg_precipMM_18_date=Weather_date_list[1096:1461]
avg_precipMM_19_date=Weather_date_list[1461:1826]
avg_precipMM_20_date=Weather_date_list[1826:2192]
avg_precipMM_21_date=Weather_date_list[2192:2557]
print(len(avg_precipMM_16_date))
print(len(avg_precipMM_17_date))
print(len(avg_precipMM_18_date))
print(len(avg_precipMM_19_date))
print(len(avg_precipMM_20_date))
print(len(avg_precipMM_21_date))

df_price=pd.read_csv("/content/drive/MyDrive/crop/karnataka_price_demand_new.csv")
df_price.head(10)

from datetime import date, timedelta
full_date=[]
sdate = date(2015, 6, 1)   # start date
edate = date(2015, 12, 31)   # end date

delta = edate - sdate       # as timedelta

for i in range(delta.days + 1):
    day = sdate + timedelta(days=i)
    full_date.append(day)

len(full_date)

df_full_date = pd.DataFrame(list(zip(full_date)),
               columns =['date'])
df_full_date.head()

date_arrival_list=df_price["date_arrival"].tolist()[::-1]
Modal_list = df_price["MODAL"].tolist()[::-1]
Arrival_list = df_price["Arrival"].tolist()[::-1]
len(date_arrival_list)

df_price['Variety'].unique()

date_arrival_list[800]

date_arrival_list[800][-2]+date_arrival_list[800][-1]

import datetime
def convert(date_time):
    format = '%d-%b-%Y'  # The format
    datetime_str = datetime.datetime.strptime(date_time, format)
    return datetime_str

def findDay(date):
    born = datetime.datetime.strptime(date, '%y-%m-%d').weekday()
    return born

temp = pd.Timestamp('15-11-2020')
print(temp.dayofweek, temp.day_name())

from os import killpg
from pandas._libs.algos import kth_smallest
year_22=[]
year_21=[]
year_20=[]
year_19=[]
year_18=[]
year_17=[]
year_16=[]
year_15=[]

price_22=[]
price_21=[]
price_20=[]
price_19=[]
price_18=[]
price_17=[]
price_16=[]
price_15=[]

Arrival_22 =[]
Arrival_21 =[]
Arrival_20 =[]
Arrival_19 =[]
Arrival_18 =[]
Arrival_17 =[]
Arrival_16 =[]
Arrival_15 =[]

day_22=[]
day_21=[]
day_20=[]
day_19=[]
day_18=[]
day_17=[]
day_16=[]
day_15=[]
for i in range(0,len(date_arrival_list)):
  last_digit = date_arrival_list[i][-2]+date_arrival_list[i][-1]
  if (last_digit == '22'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_22.append(temp.dayofweek)
    year_22.append(convert(k))
    price_22.append(Modal_list[i])
    Arrival_22.append(Arrival_list[i])

  if (last_digit == '21'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_21.append(temp.dayofweek)
    year_21.append(convert(k))
    price_21.append(Modal_list[i])
    Arrival_21.append(Arrival_list[i])

  if (last_digit == '20'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_20.append(temp.dayofweek)
    year_20.append(convert(k))
    price_20.append(Modal_list[i])
    Arrival_20.append(Arrival_list[i])

  if (last_digit == '19'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_19.append(temp.dayofweek)
    year_19.append(convert(k))
    price_19.append(Modal_list[i])
    Arrival_19.append(Arrival_list[i])

  if (last_digit == '18'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_18.append(temp.dayofweek)
    year_18.append(convert(k))
    price_18.append(Modal_list[i])
    Arrival_18.append(Arrival_list[i])

  if (last_digit == '17'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_17.append(temp.dayofweek)
    year_17.append(convert(k))
    price_17.append(Modal_list[i])
    Arrival_17.append(Arrival_list[i])

  if (last_digit == '16'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_16.append(temp.dayofweek)
    year_16.append(convert(k))
    price_16.append(Modal_list[i])
    Arrival_16.append(Arrival_list[i])

  if (last_digit == '15'):
    date = date_arrival_list[i]
    k = date_arrival_list[i][:-2] + '20' + date_arrival_list[i][-2:]
    temp = pd.Timestamp(k)
    day_15.append(temp.dayofweek)
    year_15.append(convert(k))
    price_15.append(Modal_list[i])
    Arrival_15.append(Arrival_list[i])

print(len(year_15))
print(len(year_16))
print(len(year_17))
print(len(year_18))
print(len(year_19))
print(len(year_20))
print(len(year_21))
print(len(year_22))

df_ = pd.DataFrame(list(zip(full_date)),
               columns =['date'])
df_full_date.head()

import matplotlib.pyplot as plt
x1 = year_16
y1 = price_16
y2 = Arrival_16

x2=avg_precipMM_16_date
y3=avg_precipMM_16

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")



plt.xlabel('price/Arrival/avg_precipMM')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = year_16
y1 = price_16
y2 = Arrival_16

x2=avg_precipMM_16_date
y3=avg_precipMM_16
y4=precipMM_16

plt.plot(x2, y3, label = "avg_precipMM")


plt.xlabel('avg_precipMM')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('karnataka_avg_precipMM_2016')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

plt.plot(x2, y4, label = "precipMM")

import matplotlib.pyplot as plt
x1 = year_17
y1 = price_17
y2 = Arrival_17

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")


plt.xlabel('price/Arrival')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato_2017')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()



import matplotlib.pyplot as plt
x1 = year_18
y1 = price_18
y2 = Arrival_18

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")


plt.xlabel('price/Arrival')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato_2018')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = year_19
y1 = price_19
y2 = Arrival_19

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")


plt.xlabel('price/Arrival')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = year_20
y1 = price_20
y2 = Arrival_20

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")


plt.xlabel('price/Arrival')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

import matplotlib.pyplot as plt
x1 = year_21
y1 = price_21
y2 = Arrival_21

plt.plot(x1, y1, label = "price")
plt.plot(x1, y2, label = "Arrival")


plt.xlabel('price/Arrival')
# naming the y axis
plt.ylabel('Date')
# giving a title to my graph
plt.title('Seasonal_tomato')
# show a legend on the plot
plt.legend()
# function to show the plot
plt.show()

df_15 = pd.DataFrame(list(zip(year_15, price_15,Arrival_15,day_15)),
               columns =['date', 'price','Arrival','Day'])
df_15.head(10)

df_15.dtypes

df_15.shape

import numpy as np
pd.isnull(np.datetime64('NaT'))

k0=df_15['Day'].tolist()
k1=df_15['price'].tolist()
k2=df_15['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_15_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_15_new.head(10)

df_16 = pd.DataFrame(list(zip(year_16, price_16,Arrival_16,day_16)),
               columns =['date', 'price','Arrival','Day'])
df_16.head(10)

k0=df_16['Day'].tolist()
k1=df_16['price'].tolist()
k2=df_16['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_16_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_16_new.head(10)

df_17 = pd.DataFrame(list(zip(year_17, price_17,Arrival_17,day_17)),
               columns =['date', 'price','Arrival','Day'])
df_17.head(10)

k0=df_17['Day'].tolist()
k1=df_17['price'].tolist()
k2=df_17['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_17_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_17_new.head(10)

df_18 = pd.DataFrame(list(zip(year_18, price_18,Arrival_18,day_18)),
               columns =['date', 'price','Arrival','Day'])
df_18.head(10)

k0=df_18['Day'].tolist()
k1=df_18['price'].tolist()
k2=df_18['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_18_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_18_new.head(10)

df_19 = pd.DataFrame(list(zip(year_19, price_19,Arrival_19,day_19)),
               columns =['date', 'price','Arrival','Day'])
df_19.head(10)

k0=df_19['Day'].tolist()
k1=df_19['price'].tolist()
k2=df_19['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_19_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_19_new.head(10)

df_20 = pd.DataFrame(list(zip(year_20, price_20,Arrival_20,day_20)),
               columns =['date', 'price','Arrival','Day'])
df_20.head(10)

k0=df_20['Day'].tolist()
k1=df_20['price'].tolist()
k2=df_20['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_20_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_20_new.head(10)

df_21 = pd.DataFrame(list(zip(year_21, price_21,Arrival_21,day_21)),
               columns =['date', 'price','Arrival','Day'])
df_21.head(10)

k0=df_21['Day'].tolist()
k1=df_21['price'].tolist()
k2=df_21['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_21_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_21_new.head(10)

df_22 = pd.DataFrame(list(zip(year_22, price_22,Arrival_22,day_22)),
               columns =['date', 'price','Arrival','Day'])
df_22.tail(10)

k0=df_22['Day'].tolist()
k1=df_22['price'].tolist()
k2=df_22['Arrival'].tolist()
avg=[]
week=[-1]
pr=[]
Ar=[]
n=[]
for i in range(1,len(k0)):
  if (k0[i-1]>k0[i]):
    week.append(i-1)
# print(week)
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print('W'+str(i))
    print(k1[(week[i]+1):(week[i+1]+1)])
    print(k2[(week[i]+1):(week[i+1]+1)])
    print("//////////////////////////////////")
    pr.append(sum(k1[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
    Ar.append(sum(k2[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")


df_22_new = pd.DataFrame(list(zip(n,pr,Ar)),
               columns =['week', 'price','Arrival'])
df_22_new.head(10)

convert('03-Jul-2015')

convert('03-Jul-2015')

dates = pd.Index([pd.Timestamp('2012-05-01'),
                  pd.Timestamp('2012-05-04'),
                  pd.Timestamp('2012-05-06')])
s = pd.Series([1, 2, 3], dates)
s

findDay("2015-06-03")

c=[1,2,3,4,5,3,5,6,7,9,1,3,5]
avg=[]
week=[-1]
for i in range(1,len(c)):
  if (c[i-1]>c[i]):
    week.append(i-1)
    # avg.append(sum(c[0:i]/i)
print(week)

try:
  for i in range(0,len(week)):
    print((week[i+1]-week[i]))
    print(len(week))
except:
  print("on")

k=[2,4,6,7,8,9,4,2,1,6,7,8,5]
p=[]
n=[]
try:
  for i in range(0,len(week)):
    n.append('W'+str(i))
    print(k[(week[i]+1):(week[i+1]+1)])
    # print((week[i+1]-week[i]))
    p.append(sum(k[(week[i]+1):(week[i+1]+1)])/(week[i+1]-week[i]))
except:
  print("no")

p

n